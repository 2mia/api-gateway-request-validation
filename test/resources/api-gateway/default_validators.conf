# the following variable are set by request_validator.lua
set $validate_request_status 'na';
set $validate_request_response_body 'na';
set $validate_request_response_time -1;
# where to redirect to send an error response
set $validation_error_page '@handle_gateway_validation_error';

# the next vars are automatically set from the api_key values
# here they are initialized just so that they can be set later on by api_key_validator.lua
set $publisher_org_name TBD;
set $realm TBD;
# service_id should be set by each individual service
# set $service_id TBD;
set $key_secret TBD;
set $service_name TBD;
set $consumer_org_name TBD;
set $app_name TBD;
set $plan_name TBD;
set $service_env 'sandbox';

location /validate-request {
    internal;
    content_by_lua 'ngx.apiGateway.validation.defaultValidateRequestImpl()';
}

location /validate_api_key {
    internal;
    set $key $arg_key;
    set $service_id $arg_service_id;
    content_by_lua 'ngx.apiGateway.validation.validateApiKey()';
}

# Error handler for validation errors
# NOTE: this endpoint assumes that $validate_request_status and $validate_request_response_body is set before
location @handle_gateway_validation_error {
    internal;
    content_by_lua '
        local ErrorDecorator = require "api-gateway.validation.validatorsHandlerErrorDecorator"
        local decorator = ErrorDecorator:new()
        decorator:setUserDefinedResponsesFromJson(ngx.var.validator_custom_error_responses)
        decorator:decorateResponse(ngx.var.validate_request_status, ngx.var.validate_request_response_body)
    ';

    # Make sure you capture the metrics for invalid api requests
    # log_by_lua_file /path/to/log_metrics.lua;
}